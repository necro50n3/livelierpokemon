plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

loom {
    enableTransitiveAccessWideners.set(true)
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation("com.cobblemon:neoforge:$rootProject.cobblemon_version")
    forgeRuntimeLibrary("thedarkcolour:kotlinforforge-neoforge:$rootProject.kotlin_for_forge_version") {
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }
    include(modApi "me.shedaniel.cloth:cloth-config-neoforge:$rootProject.cloth_config_version")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    exclude "com/**/*"
    exclude "com.*"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    atAccessWideners.add("livelierpokemon.accesswidener")

    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}